{"version":3,"file":"pagination.component.js","sourceRoot":"","sources":["file:///D:/projects/angular-4-data-table/src/components/pagination.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,sCAA8D;AAC9D,qDAA8C;AAC9C,6DAA4D;AAC5D,uDAAsD;AAQtD,IAAa,mBAAmB;IAE5B,6BAAwD,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAG,CAAC;IAEhF,sCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnF,CAAC;IAED,yCAAW,GAAX;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAClD,CAAC;IAED,uCAAS,GAAT;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,sCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACtE,CAAC;IAED,sBAAI,wCAAO;aAAX;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtE,CAAC;;;OAAA;IAED,sBAAI,sCAAK;aAAT;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAChC,CAAC;aAED,UAAU,KAAK;YACX,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,CAAM,KAAK,CAAC,CAAC,CAAC,oEAAoE;QACnH,CAAC;;;OAJA;IAMD,sBAAI,qCAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QAC/B,CAAC;aAED,UAAS,KAAK;YACV,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAM,KAAK,CAAC,CAAC;QAC7C,CAAC;;;OAJA;IAKL,0BAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,mBAAmB;IAL/B,gBAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,QAAQ,EAAE,yCAAmB;QAC7B,MAAM,EAAE,CAAC,mCAAgB,CAAC;KAC3B,CAAC;IAGe,WAAA,aAAM,CAAC,iBAAU,CAAC,cAAM,OAAA,2BAAS,EAAT,CAAS,CAAC,CAAC,CAAA;qCAAmB,2BAAS;GAFnE,mBAAmB,CAuC/B;AAvCY,kDAAmB","sourcesContent":["import { Component, Inject, forwardRef } from '@angular/core';\r\nimport { DataTable } from './table.component';\r\nimport { PAGINATION_TEMPLATE } from './pagination.template';\r\nimport { PAGINATION_STYLE } from \"./pagination.style\";\r\n\r\n\r\n@Component({\r\n  selector: 'data-table-pagination',\r\n  template: PAGINATION_TEMPLATE,\r\n  styles: [PAGINATION_STYLE]\r\n})\r\nexport class DataTablePagination {\r\n\r\n    constructor(@Inject(forwardRef(() => DataTable)) public dataTable: DataTable) {}\r\n\r\n    pageBack() {\r\n        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);\r\n    }\r\n\r\n    pageForward() {\r\n        this.dataTable.offset += this.dataTable.limit;\r\n    }\r\n\r\n    pageFirst() {\r\n        this.dataTable.offset = 0;\r\n    }\r\n\r\n    pageLast() {\r\n        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;\r\n    }\r\n\r\n    get maxPage() {\r\n        return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);\r\n    }\r\n\r\n    get limit() {\r\n        return this.dataTable.limit;\r\n    }\r\n\r\n    set limit(value) {\r\n        this.dataTable.limit = Number(<any>value); // TODO better way to handle that value of number <input> is string?\r\n    }\r\n\r\n    get page() {\r\n        return this.dataTable.page;\r\n    }\r\n\r\n    set page(value) {\r\n        this.dataTable.page = Number(<any>value);\r\n    }\r\n}\r\n"]}